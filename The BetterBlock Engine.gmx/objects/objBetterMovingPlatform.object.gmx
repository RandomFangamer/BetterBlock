<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMovingPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>objPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yspeed = 0;
player = noone;
wasCarrying = false;
image_speed = 0;
bbox_tPrevious = bbox_top;
bbox_bPrevious = bbox_bottom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player = instance_place(x, y-global.grav, objPlayer);
if (wasCarrying &amp;&amp; player == noone) player = instance_place(xprevious, yprevious-global.grav, objPlayer); //prev. frame

if (player == noone &amp;&amp; global.grav == 1 &amp;&amp; wasCarrying){
    player = instance_place(xprevious, yprevious-global.grav - max(bbox_top - bbox_tPrevious, 0), objPlayer);
}
if (player == noone &amp;&amp; global.grav == -1 &amp;&amp; wasCarrying){
    player = instance_place(xprevious, yprevious-global.grav - min(bbox_bottom - bbox_bPrevious, 0), objPlayer); //prev. frame position and scale
}

//Not on top of platform
if (player != noone &amp;&amp; !((global.grav == 1 &amp;&amp; player.yprevious + player.bottomToOrigin - player.gravity &lt;= bbox_tPrevious) || (global.grav == -1 &amp;&amp; player.yprevious - player.topToOrigin + other.gravity &gt;= bbox_bPrevious)))
    player = noone;

//Move Player
if (player != noone &amp;&amp; (!instance_exists(player.riding) || player.riding == id || scrIsBetterBlock(player.riding) || (sign(y - yprevious) == -global.grav &amp;&amp; ((global.grav == 1 &amp;&amp; bbox_top &lt; player.riding.bbox_top) || (global.grav == -1  &amp;&amp; bbox_bottom &gt; player.riding.bbox_bottom))))){
    with (player){
        riding = other;
        djump = 1;
        onPlatform = true;
        
        //Vertical Movement
        if (global.grav == 1){
            if (vspeed &gt; 0) vspeed = 0;
            platCheck = other.bbox_top - (y+bottomToOrigin);
            for(platCounter=1; platCounter&lt;=ceil(abs(platCheck)); platCounter++){
                if (place_meeting(x, y+platCounter*sign(platCheck), objBlock)){ //touching objBlock or a child of objBlock
                    with (objBlock){
                        if (place_meeting(x, y-other.platCounter*sign(other.platCheck), other) &amp;&amp; id != other.riding){ //avoid being pulled into a block or through a platform
                            if (other.platCheck &gt; 0 &amp;&amp; bbox_top &gt;= other.y + other.bottomToOrigin - 1.1*other.gravity){
                                other.y = bbox_top - other.bottomToOrigin; //stand on the block
                                other.platCheck = 0; //end the for loop
                                other.onPlatform = (object_is_ancestor(object_index, objPlatform) || object_index == objPlatform);
                                other.riding = id;
                                break;
                            }else if (scrIsBlock() &amp;&amp; other.platCheck &lt; 0 &amp;&amp; (bbox_bottom + 1) &lt;= other.y - other.topToOrigin){ //get pushed through platform
                                other.vspeed = 0;
                                other.y = (bbox_bottom + 1) + other.topToOrigin; //snap to the bottom of the block
                                other.platCheck = 0; //end the for loop
                                break;
                            }
                        }
                    }
                }
            }
            y += platCheck;
        }else if (global.grav == -1){
            if (vspeed &lt; 0) vspeed = 0;
            platCheck = (other.bbox_bottom + 1) - (y-topToOrigin);
            for(platCounter=1; platCounter&lt;=ceil(abs(platCheck)); platCounter++){
                if (place_meeting(x, y+platCounter*sign(platCheck), objBlock)){ //touching objBlock or a child of objBlock
                    with (objBlock){
                        if (place_meeting(x, y-other.platCounter*sign(other.platCheck), other) &amp;&amp; id != other.riding){ //avoid being pulled into a block or through a platform
                            if (other.platCheck &lt; 0 &amp;&amp; (bbox_bottom + 1) &lt;= other.y + other.topToOrigin - 1.1*other.gravity){
                                other.y = (bbox_bottom + 1) + other.topToOrigin; //stand on the block
                                other.platCheck = 0 //end the for loop
                                other.onPlatform = (object_is_ancestor(object_index, objPlatform) || object_index == objPlatform);
                                other.riding = id;
                                break;
                            }else if (scrIsBlock() &amp;&amp; other.platCheck &gt; 0 &amp;&amp; bbox_top &gt;= other.y - other.bottomToOrigin){ //get pushed through platform
                                other.vspeed = 0;
                                other.y = bbox_top - other.bottomToOrigin; //snap to the top of block
                                other.platCheck = 0; //end the for loop
                                break;
                            }
                        }
                    }
                }
            }
            y += platCheck;
        }
        //Horizontal Movement
        if (riding == other.id){ //will not be true if the player was placed on a block while calculating vertical movement in the above section;
            platCheck = riding.x - riding.xprevious;
            platCheck -= hPush; //prevents the player from hanging on the edge of a moving platfom when they should have fallen
            for(platCounter=1; platCounter&lt;=ceil(abs(platCheck)); platCounter++){
                if (place_meeting(x+platCounter*sign(platCheck), y, objBlock)){
                    with (objBlock){
                        if (scrIsBlock() &amp;&amp; place_meeting(x-other.platCounter*sign(other.platCheck), y, other)){
                            other.platCheck = (other.platCounter-1)*sign(other.platCheck);
                            other.platCounter = ceil(abs(other.platCheck));
                            break;
                        }
                    }
                }
            }
            x += platCheck;
        }
    }
}

wasCarrying = !(player == noone);

bbox_tPrevious = bbox_top;
bbox_bPrevious = bbox_bottom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
